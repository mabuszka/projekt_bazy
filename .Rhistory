?mutate
n_wycieczek <- 50
wycieczki_rand <- data.frame("oferta_id" = sample(oferty_rand$oferta_id,n_wycieczek, replace = TRUE))
wycieczki_rand %>%
left_join( oferty_rand[,c("oferta_id", "dlugosc", "limit_uczestnikow")], by = "oferta_id")%>%
mutate("data_rozpoczecia" = sample(seq(as.Date("2021/01/01"), as.Date("2021/12/31"),by = "day"), n_wycieczek, replace = TRUE)) %>%
mutate("data_zakonczenia" = data_rozpoczecia + dlugosc) %>%
mutate("liczba_uczestnikow" = sapply(limit_uczestnikow, function(x) {
sample(seq(5, x, by = 1), 1)
})) %>%
select(!c(dlugosc, limit_uczestnikow)) -> wycieczki_rand
wycieczki_rand <- data.frame("oferta_id" = sample(oferty_rand$oferta_id,n_wycieczek, replace = TRUE))
#oferty
n_ofert <- 20
world.cities %>%
filter( pop > 300000) -> cities
oferty_rand <- data.frame("miejsce_wyjazdu" = sample(cities[["name"]], n_ofert,replace = TRUE),
"limit_uczestnikow" = sample(10:35, n_ofert, replace = TRUE),
"dlugosc" = sample(2:14, n_ofert, replace = TRUE))
oferty_rand %>%
mutate("cena" = sample(400:1200, n_ofert) * dlugosc_trwania) -> oferty_rand
templatka_opisu <- c("Wspanialy wyjazd do city! Niewiarygodne przeĹĽycia gwarantowane. Zrelaksuj sie az liczba_dni dni. W ramach wyjazdu wiele niesamowitych atrakcji.")
oferty_rand %>%
mutate("opis" =  str_replace(templatka_opisu, "city", miejsce_wyjazdu )) %>%
mutate(opis = str_replace(opis, "liczba_dni", as.character(dlugosc))) -> oferty_rand
#tymczasowe zanim zrobiÄ™ Ĺ›ciÄ…gniÄ™cie z tabeli
oferty_rand %>%
mutate("oferta_id" = 1:n_ofert) -> oferty_rand
require(dplyr)
require(lubridate)
n_ofert <- 20
world.cities %>%
filter( pop > 300000) -> cities
oferty_rand <- data.frame("miejsce_wyjazdu" = sample(cities[["name"]], n_ofert,replace = TRUE),
"limit_uczestnikow" = sample(10:35, n_ofert, replace = TRUE),
"dlugosc" = sample(2:14, n_ofert, replace = TRUE))
oferty_rand %>%
mutate("cena" = sample(400:1200, n_ofert) * dlugosc_trwania) -> oferty_rand
templatka_opisu <- c("Wspanialy wyjazd do city! Niewiarygodne przeĹĽycia gwarantowane. Zrelaksuj sie az liczba_dni dni. W ramach wyjazdu wiele niesamowitych atrakcji.")
oferty_rand %>%
mutate("opis" =  str_replace(templatka_opisu, "city", miejsce_wyjazdu )) %>%
mutate(opis = str_replace(opis, "liczba_dni", as.character(dlugosc))) -> oferty_rand
#tymczasowe zanim zrobiÄ™ Ĺ›ciÄ…gniÄ™cie z tabeli
oferty_rand %>%
mutate("oferta_id" = 1:n_ofert) -> oferty_rand
# wycieczki
n_wycieczek <- 50
wycieczki_rand <- data.frame("oferta_id" = sample(oferty_rand$oferta_id,n_wycieczek, replace = TRUE))
wycieczki_rand %>%
left_join( oferty_rand[,c("oferta_id", "dlugosc", "limit_uczestnikow")], by = "oferta_id")%>%
mutate("data_rozpoczecia" = sample(seq(as.Date("2021/01/01"), as.Date("2021/12/31"),by = "day"), n_wycieczek, replace = TRUE)) %>%
mutate("data_zakonczenia" = data_rozpoczecia + dlugosc) %>%
mutate("liczba_uczestnikow" = sapply(limit_uczestnikow, function(x) {
sample(seq(5, x, by = 1), 1)
})) %>%
select(!c(dlugosc, limit_uczestnikow)) -> wycieczki_rand
require(dplyr)
require(lubridate)
n_ofert <- 20
world.cities %>%
filter( pop > 300000) -> cities
require(maps)
require(dplyr)
require(maps)
n_ofert <- 20
world.cities %>%
filter( pop > 300000) -> cities
oferty_rand <- data.frame("miejsce_wyjazdu" = sample(cities[["name"]], n_ofert,replace = TRUE),
"limit_uczestnikow" = sample(10:35, n_ofert, replace = TRUE),
"dlugosc" = sample(2:14, n_ofert, replace = TRUE))
oferty_rand %>%
mutate("cena" = sample(400:1200, n_ofert) * dlugosc_trwania) -> oferty_rand
oferty_rand %>%
mutate("cena" = sample(400:1200, n_ofert) * dlugosc) -> oferty_rand
templatka_opisu <- c("Wspanialy wyjazd do city! Niewiarygodne przeĹĽycia gwarantowane. Zrelaksuj sie az liczba_dni dni. W ramach wyjazdu wiele niesamowitych atrakcji.")
oferty_rand %>%
mutate("opis" =  str_replace(templatka_opisu, "city", miejsce_wyjazdu )) %>%
mutate(opis = str_replace(opis, "liczba_dni", as.character(dlugosc))) -> oferty_rand
require(randomNames)
require(stringi)
require(stringr)
oferty_rand %>%
mutate("opis" =  str_replace(templatka_opisu, "city", miejsce_wyjazdu )) %>%
mutate(opis = str_replace(opis, "liczba_dni", as.character(dlugosc))) -> oferty_rand
#tymczasowe zanim zrobiÄ™ Ĺ›ciÄ…gniÄ™cie z tabeli
oferty_rand %>%
mutate("oferta_id" = 1:n_ofert) -> oferty_rand
# wycieczki
n_wycieczek <- 50
wycieczki_rand <- data.frame("oferta_id" = sample(oferty_rand$oferta_id,n_wycieczek, replace = TRUE))
wycieczki_rand %>%
left_join( oferty_rand[,c("oferta_id", "dlugosc", "limit_uczestnikow")], by = "oferta_id")%>%
mutate("data_rozpoczecia" = sample(seq(as.Date("2021/01/01"), as.Date("2021/12/31"),by = "day"), n_wycieczek, replace = TRUE)) %>%
mutate("data_zakonczenia" = data_rozpoczecia + dlugosc) %>%
mutate("liczba_uczestnikow" = sapply(limit_uczestnikow, function(x) {
sample(seq(5, x, by = 1), 1)
})) %>%
select(!c(dlugosc, limit_uczestnikow)) -> wycieczki_rand
View(wycieczki_rand)
wycieczki_rand[1]
wycieczki_rand[3][1]
wycieczki_rand[3]
wycieczki_rand[3][1]
wycieczki_rand[[3]][1]
wycieczki_rand[[3]][1]-wycieczki_rand[[2]][1]
n<-wycieczki_rand[[3]][1]-wycieczki_rand[[2]][1]
n
n<-as.integer(wycieczki_rand[[3]][1]-wycieczki_rand[[2]][1])
n
as.integer(wycieczki_rand[3]-wycieczki_rand[2])
wycieczki_rand[3]-wycieczki_rand[2]
n<-as.integer(unlist(wycieczki_rand[3]-wycieczki_rand[2]))
n
View(cities)
View(oferty_rand)
wycieczki_rand[[3]][1]>wycieczki_rand[[2]][1]
duplicate(c(1,2,3,1))
duplicated(c(1,2,3,1))
duplicated(c(1,2,1,1))
func<-function(x){x+1}
sapply(c(1,2,3,4,5),func)
klienci <- sample(1:n_klientow,n_zamowien,replace = TRUE)
powtorzeni_klienci <- replicated(klienci)
wycieczki <- sample(1:n_wycieczek,n_zamowien,replace=TRUE)
wycieczki[powtorzeni_klienci]
klienci <- sample(1:n_klientow,n_zamowien,replace = TRUE)
#klienci: imie, nazwisko, kraj, data urodzenia, ulica, nr domu, miasto, kod pocztowy, pesel, nr telefonu
n_klientow <- 100
# zamowienia: klient_id, wycieczka_id, liczba_osob, klasa_oferty, sposob_platnosci
n_zamowien <- 75
# wycieczki
n_wycieczek <- 50
klienci <- sample(1:n_klientow,n_zamowien,replace = TRUE)
powtorzeni_klienci <- replicated(klienci)
wyjazdy <- sample(1:n_wycieczek,n_zamowien,replace=TRUE)
wyjazdy[powtorzeni_klienci]
powtorzeni_klienci <- duplicated(klienci)
wyjazdy[powtorzeni_klienci]
limit[wyjazdy]
wycieczki<-wycieczki_rand
limit<-wycieczki[4]
limity_wyjazdow<-limit[wyjazdy]
limit
wycieczki[[4]]
limit<-wycieczki[[4]]
limity_wyjazdow<-limit[wyjazdy]
limity_wyjazdow
wyjazdy
powtorzeni_klienci
klienci[powtorzeni_klienci]
c(1,2,1,1)[duplicated(c(1,2,1,1))]
duplicated(c(1,2,1,1))
anyDuplicated(c(1,2,1,1))
any(duplicated(c(1,2,1,1)))
duplicated(c(1,2,1,1))
unique(c(1,2,1,1))
id_wycieczki <- 1:n_wycieczek
limit<-wycieczki[[4]]
klienci <- sample(1:n_klientow,n_zamowien,replace = TRUE)
wyjazdy <- sample(1:n_wycieczek,n_zamowien,replace=TRUE)
liczba <- sample(1:5,n_zamowien,replace=TRUE)
powtorzeni_klienci <- duplicated(klienci)
limity_wyjazdow<-limit[wyjazdy]
poczatek_wyjazdu<-wycieczki[[2]][wyjazdy]
koniec_wyjazdu<-wycieczki[[3]][wyjazdy]
tymczsowe_zamowienia<-data.frame(klienci=klienci,wyjazdy=wyjazdy,liczba_osob=liczba,limity=limity_wyjazdow,poczatek=poczatek_wyjazdu,koniec=koniec_wyjazdu)
View(tymczsowe_zamowienia)
View(tymczsowe_zamowienia)
tymczsowe_zamowienia[,1]
tymczsowe_zamowienia[1,]
tymczsowe_zamowienia[1,][2]
tymczsowe_zamowienia[1,][2]+2
tymczsowe_zamowienia[1,][2]>2
1:n_zamowien[unique(klienci)]
unique(klienci)
1:n_zamowien
for(i in (1:n_zamowien)[unique(klienci)])
(1:n_zamowien)[unique(klienci)]
seq(1:n_zamowien)[unique(klienci)]
seq(1:n_zamowien)[c(3,1)]
tymczsowe_zamowienia[tymczsowe_zamowienia[[1]]=13]
tymczsowe_zamowienia[tymczsowe_zamowienia[[1]]==13]
tymczsowe_zamowienia[,tymczsowe_zamowienia[[1]]==13]
tymczasowe_zamowienia<-data.frame(klienci=klienci,wyjazdy=wyjazdy,liczba_osob=liczba,limity=limity_wyjazdow,poczatek=poczatek_wyjazdu,koniec=koniec_wyjazdu)
tymczasowe_zamowienia[[1]]
tymczasowe_zamowienia[[1]]==13
tymczasowe_zamowienia[tymczasowe_zamowienia[[1]]==13,]
2021-05-04 %overlaps% 2021-05-14
Overlap(2021-05-04,2021-05-14)
install.packages('DescTools')
library('DescTools')
Overlap(2021-05-04,2021-05-14)
Overlap(c(2021-05-04,2021-05-14),c( 2021-11-22, 2021-11-30))
Overlap(c(2021-11-04,2021-11-14),c( 2021-11-12, 2021-11-30))
zamowienie<-tymczasowe_zamowienia[tymczasowe_zamowienia[[1]]==13,]
zamowienie[2]
daty<-zamowienie[3:4]
amowienie[3:4]
zamowienie[3:4]
daty<-zamowienie[5:6]
Overlap(daty)
daty
Overlap(c(2021-11-04,2021-11-14),c(2021-11-12, 2021-11-30),c(2021-12-12, 2021-12-30))
daty<-zamowienie[5]
daty
daty>2021-11-04
if(daty>2021-11-04){print("yas")}
sum(daty<-zamowienie[5])
all(daty<-zamowienie[5])
daty<-zamowienie[5])
daty<-zamowienie[5]
daty
all(daty>2021-11-04)
all(daty<2021-11-04)
(daty<2021-11-04)
(daty<2021-12-04)
(daty<2021-11-15)
daty
(daty<2021-11-15)
(daty>2021-11-15)
(2021-05-04>2021-11-15)
("2021-05-04">"2021-11-15")
"2021-11-15">daty
daty
all("2021-11-15">daty)
poczatek<-zamowienie[5]
koniec<-zamowienie[6]
poczatek
koniec
poczatek<koniec
length(poczatek)
poczatek
length(poczatek)
length(poczatek[1,])
length(poczatek[,1])
poczatek[1]
poczatek[1,]
require(DescTools)
zamowienie[5]
sorted(zamowienie[5])
sort(zamowienie[5])
zamowienie[[5]]
sort(zamowienie[[5]])
sort("2021-11-22","2021-05-04")
sort(c("2021-11-22","2021-05-04"))
zamowienie[[5:6]]
daty<-zamowienie[5:6]
daty
sort(daty)
daty<-zamowienie[5:6,]
sort(daty)
daty<-zamowienie[,5:6]
sort(daty)
zamowienie[5:6,]
zamowienie[5:6]
daty<-as.list(zamowienie[5:6])
daty
sort(daty)
daty<-zamowienie[5:6]
daty
daty[1]
(daty[[1]])
(daty[[1]])
daty[order(daty[[1]])]
daty[order(daty[[1]],decreasing = TRUE)]
daty[order(daty[[1]],decreasing = FALSE)]
daty[order(daty[[1]],decreasing = FALSE),]
daty[order(daty[[1]],decreasing = TRUE),]
daty[1]
ilosc_dat<-length(daty[[1]])
length(daty[[1]])
daty[1]
daty[,1]
daty[1:2]
daty[,1]
daty[1,]
daty[[1,]]
daty[[1]]
daty[1,]
Overlaps(daty[1,],daty[2,])
Overlap(daty[1,],daty[2,])
as.vector(daty[1,])
c(daty[1,])
c(daty[[1]][1]),daty[[2]][1])
c(daty[[1]][1],daty[[2]][1])
Overlap(c(daty[[1]][1],daty[[2]][1]),c(daty[[1]][2],daty[[2]][2]))
zamowienie
zamowienie[0]
index(zamowienie)
which(zamowienie)
daty[order(daty[[1]],decreasing = TRUE),]
daty[[1]][k]
daty[[1]][1]
i<-13
k<-1
tymczasowe_zamowienia[tymczasowe_zamowienia[[5]]==daty[[1]][k]&tymczasowe_zamowienia[[6]]==daty[[2]][k]&tymczasowe_zamowienia[[1]]==i]
tymczasowe_zamowienia[,tymczasowe_zamowienia[[5]]==daty[[1]][k]&tymczasowe_zamowienia[[6]]==daty[[2]][k]&tymczasowe_zamowienia[[1]]==i]
tymczasowe_zamowienia[,tymczasowe_zamowienia[[5]]==daty[[1]][k]&tymczasowe_zamowienia[[6]]==daty[[2]][k]&tymczasowe_zamowienia$klienci==i]
tymczasowe_zamowienia[tymczasowe_zamowienia[[5]]==daty[[1]][k]&tymczasowe_zamowienia[[6]]==daty[[2]][k]&tymczasowe_zamowienia$klienci==i]
